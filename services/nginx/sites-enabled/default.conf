
# Defining an upstream causes Nginx to resolve the backend servers at startup. If the service name can't be 
# resolved the server won't start. DNS records are cached until the next reload and can cause failures when
# backend servers are restarted and and IP addresses change. The upside is that upstream pool allow you to
# specify load-balacing algorithms (e.g., least_conn) for each upstream pool.
#
# This is the prefered method in production.

# upstream missioncontrol_upstream {
#     ip_hash;
#     least_conn;
#     server missioncontrol_web:80 max_fails=3 fail_timeout=30s;
# }

# upstream portauthority_upstream {
#     ip_hash;
#     least_conn;
#     server portauthority_web:80 max_fails=3 fail_timeout=30s;
# }   

# upstream shipyard_upstream {
#     ip_hash;
#     least_conn;
#     server shipyard_web:80 max_fails=3 fail_timeout=30s;
# }

server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    # docker DNS server
    resolver 127.0.0.11 [::1]:5353 valid=30s;

    # Using a variable to specify the domain name causes Nginx to resolve the domain when the TTL expires.
    # Startup and reload operations won't fail if the backends are not alive, and we can control how often NGINX
    # re-resolves the name. The drawback is that you can't specify a load balancing alorithm or other parameters
    # that make upstream pools useful.
    #
    # This is useful for development purposes.

    location /admin/ {
        set $backend_admin missioncontrol_web;
        proxy_pass http://$backend_admin:80;
    }

    location /jobs/ {
        set $backend_jobs portauthority_web;
        proxy_pass http://$backend_jobs:80;
    }

    location /messaging/ {
        set $backend_messaging shipyard_web;
        proxy_pass http://$backend_messaging:80;
    }
}
