# Development image
#
#   Builds an image for dotnet core aspnet development. This image runs dotnet core
#   with a file watcher to hot-reload sources as they are modified. 
#
#  Usage:
#   $ cd ./shipyard
#   $ docker build -t shipyard-worker:dev -f src/Shipyard.Worker/Dockerfile.develop .
#   $ docker run --rm -it -v "${pwd}:/app/" shipyard-worker:dev      

# FROM mcr.microsoft.com/dotnet/core/sdk:3.1
# ARG BUILD_CONFIGURATION=Debug
# ENV ASPNETCORE_ENVIRONMENT=Development
# ENV DOTNET_USE_POLLING_FILE_WATCHER=true  

# # Restore packages to prime the package cache for the dev image
# WORKDIR /src
# COPY ./src/ .
# RUN find -name 'bin' -o -name 'obj' -type d | xargs rm -rf
# RUN dotnet restore /src/Shipyard.Worker
# RUN dotnet restore /src/Shipyard.Data.Migration

# # Development image assumes that ./shipyard is mounted as /src for hot reloading
# WORKDIR /app
# RUN echo "find -name 'bin' -o -name 'obj' -type d | xargs rm -rf" >> entrypoint.sh
# RUN echo "dotnet publish /src/Shipyard.Data.Migration -c ${BUILD_CONFIGURATION} -o /tools/migration" >> entrypoint.sh
# RUN echo "dotnet watch --project /src/Shipyard.Worker -- run -c ${BUILD_CONFIGURATION} --no-launch-profile" >> entrypoint.sh
# ENTRYPOINT [ "/bin/sh", "entrypoint.sh" ]




FROM mcr.microsoft.com/dotnet/core/sdk:3.1
ARG BUILD_CONFIGURATION=Debug
ENV ASPNETCORE_ENVIRONMENT=Development
ENV DOTNET_USE_POLLING_FILE_WATCHER=true  

# Restore packages to prime the package cache for the dev image
WORKDIR /app
COPY . .
RUN dotnet restore src/Shipyard.Data.Migration
RUN dotnet restore src/Shipyard.Worker

# Build development image, this assumes that ./shipyard/src is mounted as /app/src
RUN echo "dotnet publish src/Shipyard.Data.Migration -c ${BUILD_CONFIGURATION} -o /tools/migration" >> entrypoint.sh

RUN echo "dotnet build src/Shipyard.Worker -c ${BUILD_CONFIGURATION}" >> entrypoint.sh
RUN echo "dotnet watch --project src/Shipyard.Worker -- run -c ${BUILD_CONFIGURATION} --no-launch-profile" >> entrypoint.sh

ENTRYPOINT [ "/bin/sh", "entrypoint.sh" ]