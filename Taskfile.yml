version: '3'

dotenv: ['.env']

silent: true

includes:  
  nginx: ./services/nginx
  azstorage: ./services/azurestorage
  mssql: ./services/sqlserver
  rabbit: ./services/rabbitmq
  
  missioncontrol:
    taskfile: ./sources/missioncontrol/Taskfile.yml
    dir: ./sources/missioncontrol    

  portauthority:
    taskfile: ./sources/portauthority/Taskfile.yml
    dir: ./sources/portauthority    

  shipyard: 
    taskfile: ./sources/shipyard/Taskfile.yml
    dir: ./sources/shipyard
  
vars:
  SOLUTION_NAME: skunkworks
  SOLUTION_DIR:
    sh: pwd

tasks:  
  prepare:
    desc: "Creates the docker-compose.local.yml config files for local development"
    cmds: 
      - cp docker-compose.local.yml.example docker-compose.local.yml    
    status:
      - test -f docker-compose.local.yml

  up:
    desc: "Bring up the solution"
    deps: [ prepare ]
    vars:
      PROFILE: local
    cmds:
      - docker-compose -p {{.SOLUTION_NAME}} -f docker-compose.yml -f docker-compose.local.yml up -d --no-recreate  

  down: 
    desc: "Bring down the solution"
    cmds:
      - docker-compose -p {{.SOLUTION_NAME}} stop
      - docker-compose -p {{.SOLUTION_NAME}} rm -f

  restart:
    desc: "Restart the solution"
    cmds:
      - task: down
      - task: up
  
  status:
    desc: "Display the status of all containers in the solution"
    cmds:
      - docker ps --format "table {{"{{"}}.ID{{"}}"}}\t{{"{{"}}.Names{{"}}"}}\t{{"{{"}}.Status{{"}}"}}\t{{"{{"}}.Image{{"}}"}}"

  log:
    desc: "Display logs for solution"
    cmds: 
      - docker-compose -p {{.SOLUTION_NAME}} logs -f --tail 100    

  logs:
    deps: [log]
    
  build:
    desc: "Builds all container images"
    cmds: 
      - docker-compose -p {{.SOLUTION_NAME}} build --force-rm
    
  push:
    desc: "Pushes container images to remote repositories"
    cmds:
      - docker-compose push

  pull:
    desc: "Pulls the most recent container images"
    cmds:
      - docker-compose pull
    
  prune:
    desc: "Prune unused local container images networks and mounts"
    cmds:
      - echo 'Pruning unsued docker resources'
      - docker system prune -af
  
  nuke:
    desc: "Nuke all data files and reset the solution"
    cmds:
      - echo 'Deleting all local mount points from ./data/'
      - rm -rf ./data/

  default:
    cmds:
      - task -l
