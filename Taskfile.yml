version: '3'

dotenv: ['.env']

silent: true

includes:  
  # OS specific tasks
  base: ./Taskfile_{{OS}}.yml  
  # Dependency tasks
  nginx: ./services/nginx
  azstorage: ./services/azurestorage
  mssql: ./services/sqlserver
  rabbit: ./services/rabbitmq  
  # Application tasks
  missioncontrol:
    taskfile: ./sources/missioncontrol/Taskfile.yml
    dir: ./sources/missioncontrol    
  portauthority:
    taskfile: ./sources/portauthority/Taskfile.yml
    dir: ./sources/portauthority    
  shipyard: 
    taskfile: ./sources/shipyard/Taskfile.yml
    dir: ./sources/shipyard
  
vars:
  SOLUTION_NAME: skunkworks
  SOLUTION_DIR:
    sh: pwd  
  VERSION:
    sh: git rev-parse --short HEAD

tasks:  
  prepare:
    deps: [ base:prepare-docker-override, base:prepare-nuget-local ]

  up:
    desc: "Bring up the solution"
    deps: [ base:prepare ]
    vars:
      PROFILE: local
    cmds:
      - docker-compose -p {{.SOLUTION_NAME}} -f docker-compose.yml -f docker-compose.local.yml up -d --no-recreate  

  down: 
    desc: "Bring down the solution"
    cmds:
      - docker-compose -p {{.SOLUTION_NAME}} stop
      - docker-compose -p {{.SOLUTION_NAME}} rm -f

  restart:
    desc: "Restart the solution"
    cmds:
      - task: down
      - task: up
  
  status:
    desc: "Display the status of all containers in the solution"
    cmds:
      - docker ps --format "table {{"{{"}}.ID{{"}}"}}\t{{"{{"}}.Names{{"}}"}}\t{{"{{"}}.Status{{"}}"}}\t{{"{{"}}.Image{{"}}"}}"

  log:
    desc: "Display logs for solution"
    cmds: 
      - docker-compose -p {{.SOLUTION_NAME}} logs -f --tail 100    

  logs:
    deps: [log]
    
  build:
    desc: "Builds all container images"
    cmds: 
      - docker-compose -p {{.SOLUTION_NAME}} build --force-rm
    
  package:
    desc: "Package nugets"
    cmds:
      - task: portauthority:package  
      - task: shipyard:package

  package-local:
    desc: "Package nugets for local development"
    deps: [ prepare ]
    cmds:
      - task: portauthority:package-local
      - task: shipyard:package-local 

  push:
    desc: "Pushes container images to remote repositories"
    cmds:
      - docker-compose push

  pull:
    desc: "Pulls the most recent container images"
    cmds:
      - docker-compose pull
    
  prune:
    desc: "Prune unused local container images networks and mounts"
    cmds:
      - echo 'Pruning unsued docker resources'
      - docker system prune -af
  
  nuke:
    desc: "Nuke all data files and reset the solution"
    deps: [ base:nuke ]

  default:
    cmds:
      - task -l
